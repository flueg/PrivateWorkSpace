package KankanMonitorUtils;

use LWP::UserAgent;
use HTTP::Request::Common;
use Time::Local;
use File::Copy;

require Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(SendEMail SendSMS SendSMSEconomically RunCmd IsKankanHolidayToday);

use constant KANKAN_SMS_INTERFACE => "http://busi.vip.kankan.com/sms/sendMobileMessageForInternal";
use constant KANKAN_HOLIDAY_INTERFACE => "http://10.1.1.151:8090/holiday";
use constant SMS_TIMESTAMEP_FILE => ".kankan_sms_timestamp";

my $g_timestamp_tailer = <<HEADER
# Note:
# This file is automatically generated by KankanMonitorUtils.pm. Please do not
# edit.
HEADER
;
# two parameters:
#  cmd     - a command or reference to an array of command + arguments
#  timeout - number of seconds to wait (0 = forever)
#
# returns:
#  cmd exit status (-1 if timed out)
#  cmd results (STDERR and STDOUT merged into an array ref)
#
sub RunCmd
{
	my $cmd = shift || return(0, []);
	my $timeout = shift || 0;

	# opening a pipe creates a forked process    
	my $pid = open(my $pipe, '-|');
	return(-1, "Can't fork: $!") unless defined $pid;

	if ($pid) {
		# this code is running in the parent process

		my @result = ();

		if ($timeout) {
			my $failed = 1;
			eval {
				# set a signal to die if the timeout is reached
				local $SIG{ALRM} = sub { die "alarm\n" };
				alarm $timeout;
				@result = <$pipe>;
				alarm 0;
				$failed = 0;
			};
			return(-1, ['command timeout', @result]) if $failed;
		}
		else {
			@result = <$pipe>;
		}
		close($pipe);

		# return exit status, command output
		return ($? >> 8), \@result;
	}

	# this code is running in the forked child process

	{ # skip warnings in this block
		no warnings;

		# redirect STDERR to STDOUT
		open(STDERR, '>&STDOUT');

		# exec transfers control of the process
		# to the command
		ref($cmd) eq 'ARRAY' ? exec(@$cmd) : exec($cmd);
	}

	# this code will not execute unless exec fails!
	print "Can't exec @$cmd: $!";
	exit 1;
}

#
# Let's just consider the date yesterday if it's older than today.
# 	$_[0]: $time_stamp - time in seconds to test. 
# 	return: 1 - yestoday
# 		0 - today
#
sub _isYesterday($)
{
	my $time_stamp = $_[0];
	my ($sec, $min, $hour, $mday, $mon, $year) = localtime();
	return 1 if ($time_stamp < timelocal(0, 0, 0, $mday, $mon, $year));
	return 0;
}

#
#	return ($rc, $message):
#		$rc	 - 1 for holiday, 0 for working day or error.
#		$message - call back message.
#
sub IsKankanHolidayToday()
{
	my $agent = LWP::UserAgent->new;
	# No argument is required.
	my $respond = $agent->request(POST KANKAN_HOLIDAY_INTERFACE, []);
	if ($respond->is_success)
	{
		my $answer = $respond->decoded_content;
		return (1, $respond->message) if ("$answer" eq "true");
		return (0, $respond->message);
	}
	else
	{
		return (0, "error code: $respond->code, error message: $respond->message");
	}
}

#
# Send SMS to user mobile from through kankan SMS gateway.
#
#	$_[0]: $recipient - phone number list, seperated by comma ','
#	$_[1]: $message   - the text message sent to users' phone.
#	
#	return ($rc, $message):
#		$rc	 - 1 for success, 0 for error.
#		$message - call back message.
#
sub SendSMS($$)
{
	my $recipient = $_[0];
	my $message   = $_[1];

	my $agent = LWP::UserAgent->new;
#print("mob: $recipient, msg: $message.");
	my $respond = $agent->request(POST KANKAN_SMS_INTERFACE, [mobileNos => $recipient, content => $message]);

	if ($respond->is_success) 
	{
		return (1, $respond->decoded_content);
	}
	else
	{
		return (0, "error code: $respond->code, error message: $respond->message\n");
	}

}

#
# Since sending a SMS will have a cost, we should not abuse this machanism.
#
#	$_[0]: $recipient - the mobile phone number list to rechieve SMS. Seperated by comma ','
#	$_[1]: $message   - the SMS text content.
#	$_[2]: $maxinum   - the maxinum SMSs will be sent per day. default 3. Optional.
#	$_[2]: $frequency - N means only onle SMS will be sent in N hours. default 2. Optional.
#
#	return ($rc, $message):
#		$rc	 - 1 for success, 0 for error.
#		$message - call back message.
#
sub SendSMSEconomically($$;$$)
{
	my $recipient = $_[0];
	my $message   = $_[1];
	# Define the maxinum SMS will be sent a day.
	my $threshold_per_day = defined($_[2]) ? $_[2] : 3; # maxinum 3 SMS per day by default.

	# Define how frequently the SMS will be sent. N means: only one SMS will be sent in N hours.
	# But if total SMS sent is large than $threadhold_per_day, no SMS will be sent.
	my $threshold_frequency = defined($_[3]) ? $_[3] : 2; # every 2 hours by default.

	# No need to send SMS on working day. So we can save lot of money.
	# TODO: we need to way to deply the holiday of KanKan.
	my $is_kankan_holidays = 1;
	return (1, "Not a holiday or weekend day.") if (! $is_kankan_holidays);

        my $file_existed = 0;
        my $numberofSMSSent = 0;
        my $mtime = 0;
        my $time_gap = 0;
        my $rc;
        if (-e SMS_TIMESTAMEP_FILE)
        {
                $file_existed = 1;
                # Will store the number of how many SMS has been sent in timestamp file.
                my $rc = open my $fd_r, "<", SMS_TIMESTAMEP_FILE;
                if (! $rc)
                {
                        # Failed to open file
                        return (0, "Failed to open timestamp file.");
                }
                $numberofSMSSent = <$fd_r>;
                chomp $numberofSMSSent;

                # Try to get timestamp file's last modified time.
                $mtime = (stat($fd_r))[9];
                $time_gap = (time() - $mtime) / 3600;
                close $fd_r;
        }

        $rc = open my $fd_w, ">", SMS_TIMESTAMEP_FILE.tmp;
        if (! $rc)
        {
                # Failed to open file
                return (0, "Failed to open timestamp file.");
        }


        # if the last modified time is yestoday, send SMS and override the timestamp file.
        if ($file_existed && _isYesterday($mtime))
        {
                $numberofSMSSent = 0;
        }
        $numberofSMSSent ++;

        # Make sure will not send SMS beyond the frequency.
        if ($file_existed && (($time_gap - $threshold_frequency) < 0.000001))
        {
                close $fd_w;
                return (1, "SMS already sent within $threshold_frequency hours.");
        }

	# Make sure will not send more than $threshold_per_day SMS per day.
	if ($numberofSMSSent > $threshold_per_day)
	{
		close $fd_w;
		return (1, "Maximum of $numberofSMSSent SMS already sent today.");
	}

	# Send SMS and remember it.
	print $fd_w "$numberofSMSSent\n";
	print $fd_w "$g_timestamp_tailer\n";
	close $fd_w;
	move(SMS_TIMESTAMEP_FILE.tmp, SMS_TIMESTAMEP_FILE);
	return SendSMS($recipient, $message);

}

#
# Send an email with the stopped services to administrators. 
# 
#	$_[0]:  $recipient - Recipient list of whom will rechieve the mail.
#	$_[1]:  $cc	   - Carbon copy recipients.
#	$_[2]:  $subject   - Mail subject.
#	$_[3]:  $body      - Mail body.
#
#	return ($rc, $msg):
#		$rc - 1 for success, 0 for failure
#		$msg - command output.
#
sub SendEMail($$$$) 
{ 
        my $recipient = $_[0]; 
        my $cc = $_[1]; 
        my $subject = $_[2]; 
        my $body = $_[3]; 

        my $uname = `whoami`; 
        my $host_name = `hostname`; 
        chomp $uname; 
        chomp $host_name; 
        my $mail_sender = "$uname\@$host_name"; 
       	# Send the mail 
        # -xu monitor\@cc.kankan.com -xp UGtx3MMH  
        my $cmd = "/usr/local/monitor-base/bin/sendEmail -s mail.cc.kankan.com  -f $mail_sender -t \"$recipient\" -cc \"$cc\" -u \"$subject\" -o message-charset=utf8 -m \"$body\""; 
        my ($rc, $output) = RunCmd($cmd); 
	if ($rc)
	{
		return (0, join(' ', @$output));
	}

	return (1, "Send email successfully.");
}

1;
